#### Database 연결 정보
## 외부에 노출되지 않게 정보는 따로 파일로 import
spring.profiles.include=newDB


## Database 연결 정보
#spring.datasource.username=user02
#spring.datasource.password=user02
#spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
## mysql 8 이후 : com.mysql.cj.jdbc.Driver
## mysql 8 이전 : com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/user02


####------------------------ JSP View 연결--------------------------------
#### server port
server.port=80

## pom.xml <dependency> jasper, jstl 추가된 것 확인
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp


###------------------------ Hibernate---------------------
# table 생성
spring.jpa.hibernate.ddl-auto=update
## create		: 기존 테이블 삭제 후 다시 생성
## create-drop 	: create와 같으나 application종료 시점에 table drop
## update 		: 변경된 부분만 적용
## validate 	: 엔티티(VO)와 테이블이 정상적으로 매핑 되었는지 확인
## none 		: 사용하지 않을 때
## 개발 시에는 편의를 위해 create, create-drop
## 운영 시에는 update, validate, none

#### VO 클래스의 멤버변수명이 자동으로 DB에 컬럼명과 연결될 때
## regDate의 형태면 설정이 필요 		( camel case )
## reg_date의 형태면 설정 필요 없음 	( snake case ) 
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#### JPA에서 자동으로 생성되고 실행되는 SQL문을 실시간 출력
logging.level.org.hibernate.sql=debug

#### ? 에 매핑되는 파라미터 값 출력
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#### hibernate가 실행한 SQL 출력
spring.jpa.show-sql=true

#### hibernate가 실행한 SQL 출력할 때 정돈된 출력
spring.jpa.properties.hibernate.format_sql=true

#### transaction 처리
#spring.aop.proxy-target-class=true 


####----------------------- message -------------------------
## message properties 파일의 위치
spring.messages.basename=message/message
## 인코딩 설정
spring.messages.encoding=UTF-8
## message code(key)가 없는 경우
# 예외를 발생시키지 않고 코드 자체를 출력
spring.messages.use-code-as-default-message=true


####-------------------File 저장 경로---------------------------
board.notice=upload/notice
board.qna=upload/qna



